<?xml version="1.0" encoding="UTF-8"?>
<!-- 
DEBUG 指出细粒度信息事件对调试应用程序是非常有帮助的，主要用于开发过程中打印一些运行信息。
INFO 消息在粗粒度级别上突出强调应用程序的运行过程。打印一些你感兴趣的或者重要的信息，这个可以用于生产环境中输出程序运行的一些重要信息，但是不能滥用，避免打印过多的日志。
WARN 表明会出现潜在错误的情形，有些信息不是错误信息，但是也要给程序员的一些提示。
ERROR 指出虽然发生错误事件，但仍然不影响系统的继续运行。打印错误和异常信息，如果不想输出太多的日志，可以使用这个级别。
FATAL 指出每个严重的错误事件将会导致应用程序的退出。这个级别比较高了。重大错误，这种级别你可以直接停止程序了。 
-->

<configuration>

    <!-- 文件输出格式 -->
    <property name="PATTERN" value="%c [%-5level]： %msg  | [%thread] [%L] | %-12(%d{yyyy-MM-dd HH:mm:ss.SSS}) %n" />

    <!-- test文件路径 当磁盘下生成 也可以指定完整路径 如果不指定就是在当前项目结构中生成  -->
    <property name="TEST_FILE_PATH" value="/rejiejay/springboot/log" />
    <!-- pro文件路径 -->
    <property name="PRO_FILE_PATH" value="/rejiejay/springboot/log" />

    <!-- 开发环境 -->
    <springProfile name="dev">
        <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>${PATTERN}</pattern>
            </encoder>
        </appender>

        <logger name="com.roncoo.education" level="debug"/>

        <root level="info">
            <appender-ref ref="CONSOLE" />
        </root>
    </springProfile>


    <!-- 测试环境 -->
    <springProfile name="test">
        <!-- 每天产生一个文件 -->
        <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->    
    	<!-- appender是configuration的子节点，是负责写日志的组件。 -->
  
	    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
	    <!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log -->
	    <!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名-->
	    <appender name="TEST_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">    
	        <File>${TEST_FILE_PATH}/rejiejay_log.log</File>    
	        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
	        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
	        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">    
	            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
	            <!-- 文件名：log/demo.2017-12-05.0.log -->
	            <fileNamePattern>${TEST_FILE_PATH}/rejiejay_log.%d.%i.log</fileNamePattern> 
	            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 --> 
	            <maxHistory>30</maxHistory>   
	            <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">    
	                <!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->  
	                <maxFileSize>10MB</maxFileSize>    
	            </timeBasedFileNamingAndTriggeringPolicy>    
	        </rollingPolicy>    
	        <encoder>    
	            <!-- pattern节点，用来设置日志的输入格式 -->
	            <pattern>    
	                %d %p %t (%file:%line\)- %m%n  
	            </pattern>    
	            <!-- 记录日志的编码:此处设置字符集 - -->
	            <charset>UTF-8</charset>
	        </encoder>    
	    </appender>    
	    <!-- 输出日志级别 -->
	    <root level="info">    
	        <appender-ref ref="TEST_FILE" />    
	    </root>    
	    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
	    <!-- com.liyan为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
	    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
	    <!-- <logger name="com.liyan" level="DEBUG">    
	        <appender-ref ref="demolog" />    
	    </logger> -->       
    </springProfile>


    <!-- 生产环境 -->
    <springProfile name="prod">
        <!-- 每天产生一个文件 -->
        <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->    
    	<!-- appender是configuration的子节点，是负责写日志的组件。 -->
  
	    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
	    <!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log -->
	    <!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名-->
	    <appender name="PRO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">    
	        <File>${PRO_FILE_PATH}/rejiejay_log.log</File>    
	        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
	        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
	        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">    
	            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
	            <!-- 文件名：log/demo.2017-12-05.0.log -->
	            <fileNamePattern>${PRO_FILE_PATH}/rejiejay_log.%d.%i.log</fileNamePattern> 
	            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 --> 
	            <maxHistory>30</maxHistory>   
	            <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">    
	                <!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->  
	                <maxFileSize>500MB</maxFileSize>    
	            </timeBasedFileNamingAndTriggeringPolicy>    
	        </rollingPolicy>    
	        <encoder>    
	            <!-- pattern节点，用来设置日志的输入格式 -->
	            <pattern>    
	                %d %p %t (%file:%line\)- %m%n  
	            </pattern>    
	            <!-- 记录日志的编码:此处设置字符集 - -->
	            <charset>UTF-8</charset>
	        </encoder>    
	    </appender>    
	    <!-- 输出日志级别 -->
	    <root level="info">    
	        <appender-ref ref="PRO_FILE" />    
	    </root>    
	    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
	    <!-- com.liyan为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
	    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
	    <!-- <logger name="com.liyan" level="DEBUG">    
	        <appender-ref ref="demolog" />    
	    </logger> -->
    </springProfile>        
</configuration>